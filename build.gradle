plugins {
	id 'fabric-loom' version '0.2.7-SNAPSHOT'
	id 'maven-publish'
	id 'net.minecrell.licenser' version '0.4.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    refmapName = "mambience-remap.json"
}

repositories {
    maven {
        name "sponge-repo"
        url "https://repo.spongepowered.org/maven"
    }
    maven {
        name "spigot-repo"
        url "https://hub.spigotmc.org/nexus/content/groups/public"
    }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    
    implementation "org.spongepowered:spongeapi:${project.sponge_version}"
    implementation "org.spigotmc:spigot-api:${project.spigot_version}"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		include "plugin.yml"
		include "version.txt"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
		exclude "plugin.yml"
		exclude "version.txt"
	}
}

license {
	header project.file('HEADER')
	include '**/*.java'
	newLine false
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task noAssetsJar(type: Zip, dependsOn: remapJar) {
	from zipTree(remapJar.outputs.files[0])
	destinationDir = file("build/libs/")
	archiveName = "${archivesBaseName}-${version}-noAssets.jar"
	
	exclude "assets/**"
}
build.dependsOn noAssetsJar

task createResourcePack(type: JavaExec, dependsOn: remapJar) {
	classpath = remapJar.outputs.files
	main = "me.andre111.mambience.resources.RPGenerator"
	
	workingDir = "${project.projectDir}/build/libs/"
}
build.dependsOn createResourcePack



jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
